
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7794423659:AAEhrbYTbdOciv-KKbayauY5qPmoCmNt4-E"  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addadmin <id>, –µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω.")

@dp.message_handler(commands=["addadmin"])
async def cmd_addadmin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>")
            return
        new_admin_id = int(parts[1])
        if add_admin(new_admin_id):
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω.")
        else:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=["admins"])
async def cmd_admins_list(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    import sqlite3
    conn = sqlite3.connect("products.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM admins")
    ids = [str(row[0]) for row in cur.fetchall()]
    conn.close()
    await message.reply("üßë‚Äçüíª –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join(ids))

async def send_order_notification(order: dict):
    import sqlite3
    conn = sqlite3.connect("products.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM admins")
    admin_ids = [row[0] for row in cur.fetchall()]
    conn.close()

    text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n\nID: {order['id']}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n–°—É–º–º–∞: {order['total_price']} ‚ÇΩ\n\n–¢–æ–≤–∞—Ä—ã:\n"
    for p in order["products"]:
        text += f"- {p['name']} x{p['quantity']}\n"

    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

def run_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    executor.start_polling(dp, skip_updates=True)

