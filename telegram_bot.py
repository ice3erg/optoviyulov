import os
import json
import sqlite3
import logging
import asyncio
import threading
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("telegram_bot")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7794423659:AAEhrbYTbdOciv-KKbayauY5qPmoCmNt4-E"
SELLER_CHAT_ID = 984066798  # int, –Ω–µ —Å—Ç—Ä–æ–∫–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_PATH = "products.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    category TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS admins (chat_id INTEGER PRIMARY KEY)''')
cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (SELLER_CHAT_ID,))
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = None
application = None
if BOT_TOKEN and SELLER_CHAT_ID:
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(token=BOT_TOKEN)
        application = Application.builder().token(BOT_TOKEN).build()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
else:
    logger.warning("BOT_TOKEN –∏–ª–∏ SELLER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(chat_id):
    cursor.execute("SELECT 1 FROM admins WHERE chat_id = ?", (chat_id,))
    return cursor.fetchone() is not None

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    if not is_admin(chat_id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    keyboard = [
        [InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='open_admin')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')],
        [InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data='view_orders')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ö–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    if not is_admin(chat_id):
        await query.edit_message_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if query.data == 'open_admin':
        admin_url = "https://optoviyulov.onrender.com/admin"
        await query.edit_message_text(f"–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({admin_url})", parse_mode='Markdown')
    elif query.data == 'add_admin':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ chat_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
        context.user_data['mode'] = 'add_admin'
    elif query.data == 'view_orders':
        cursor.execute("SELECT id, user_id, total_price, status, created_at FROM orders")
        orders = cursor.fetchall()
        if orders:
            message = "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n" + "\n".join([
                f"üÜî {o[0]} | üë§ {o[1]} | üí∞ {o[2]}‚ÇΩ | üìå {o[3]} | üìÖ {o[4]}"
                for o in orders
            ])
        else:
            message = "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç."
        await query.edit_message_text(message)

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    if not is_admin(chat_id) or 'mode' not in context.user_data:
        return
    text = update.message.text.strip()
    mode = context.user_data['mode']
    try:
        if mode == 'add_admin':
            new_admin_id = int(text)
            cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (new_admin_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω —Å chat_id {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        del context.user_data['mode']

# /admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    if not is_admin(chat_id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    cursor.execute("SELECT chat_id FROM admins")
    admins = cursor.fetchall()
    message = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([f"- {a[0]}" for a in admins]) if admins else "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç."
    await update.message.reply_text(message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
async def send_order_notification(order_data):
    if not bot:
        logger.warning("‚ùó –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return

    message = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"*ID:* {order_data['id']}\n"
        f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {order_data['user_id']}\n"
        f"*–¢–æ–≤–∞—Ä—ã:* `{json.dumps(order_data['products'], ensure_ascii=False)}`\n"
        f"*–°—É–º–º–∞:* {order_data['total_price']} ‚ÇΩ\n"
        f"*–°—Ç–∞—Ç—É—Å:* {order_data['status']}\n"
        f"*–î–∞—Ç–∞:* {order_data['created_at']}"
    )

    try:
        cursor.execute("SELECT chat_id FROM admins")
        admins = cursor.fetchall()
        for admin in admins:
            try:
                await bot.send_message(chat_id=admin[0], text=message, parse_mode='Markdown')
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin[0]}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin[0]}: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot():
    if not application:
        logger.warning("‚ùó Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    try:
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("admins", list_admins))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await application.updater.idle()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

# –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫
def run_bot_in_background():
    if not application:
        logger.warning("‚õî Application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start_bot())
    loop.run_forever()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    run_bot_in_background()
