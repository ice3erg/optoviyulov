import json
import logging
import sqlite3
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("telegram_bot")

# –¢–æ–∫–µ–Ω –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥–º–∏–Ω (int)
BOT_TOKEN = "7794423659:AAEhrbYTbdOciv-KKbayauY5qPmoCmNt4-E"
DEFAULT_ADMIN_ID = 984066798

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
DB_PATH = "products.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    price REAL NOT NULL,
    category TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admins (
    chat_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    total_price REAL NOT NULL,
    status TEXT NOT NULL,
    created_at TEXT NOT NULL,
    products TEXT NOT NULL
)
''')

conn.commit()

# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (DEFAULT_ADMIN_ID,))
conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_admin(chat_id: int) -> bool:
    cursor.execute("SELECT 1 FROM admins WHERE chat_id = ?", (chat_id,))
    return cursor.fetchone() is not None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='open_admin')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data='add_admin')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤", callback_data='list_admins')],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data='view_orders')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if not is_admin(chat_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if query.data == 'open_admin':
        await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: https://optoviyulov.onrender.com/admin")
    elif query.data == 'add_admin':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ chat_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
        context.user_data['mode'] = 'add_admin'
    elif query.data == 'list_admins':
        cursor.execute("SELECT chat_id FROM admins")
        rows = cursor.fetchall()
        text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join([str(r[0]) for r in rows])
        await query.edit_message_text(text)
    elif query.data == 'view_orders':
        cursor.execute("SELECT id, user_id, total_price, status, created_at FROM orders")
        orders = cursor.fetchall()
        if orders:
            message = "\n".join([
                f"ID: {o[0]}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {o[1]}, –°—É–º–º–∞: {o[2]} ‚ÇΩ, –°—Ç–∞—Ç—É—Å: {o[3]}, –î–∞—Ç–∞: {o[4]}"
                for o in orders
            ])
        else:
            message = "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç."
        await query.edit_message_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ chat_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞)
async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        return

    if 'mode' not in context.user_data:
        return

    mode = context.user_data['mode']
    text = update.message.text.strip()

    if mode == 'add_admin':
        try:
            new_admin_id = int(text)
            cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (new_admin_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            context.user_data.pop('mode', None)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def send_order_notification(order_data):
    try:
        cursor.execute("SELECT chat_id FROM admins")
        admin_ids = [row[0] for row in cursor.fetchall()]
        message = (
            f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"ID: {order_data['id']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data['user_id']}\n"
            f"–¢–æ–≤–∞—Ä—ã: {json.dumps(order_data['products'], ensure_ascii=False)}\n"
            f"–°—É–º–º–∞: {order_data['total_price']} ‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: {order_data['status']}\n"
            f"–î–∞—Ç–∞: {order_data['created_at']}"
        )
        for admin_id in admin_ids:
            await bot.send_message(chat_id=admin_id, text=message)
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ {order_data['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∞–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = Bot(token=BOT_TOKEN)
application = Application.builder().token(BOT_TOKEN).build()

async def main():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input))

    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
