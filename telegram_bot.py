import asyncio
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "7794423659:AAEhrbYTbdOciv-KKbayauY5qPmoCmNt4-E"  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
DB_PATH = "products.db"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS admins (chat_id INTEGER PRIMARY KEY)")
conn.commit()

START_ADMIN_ID = 984066798
cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (START_ADMIN_ID,))
conn.commit()

application = ApplicationBuilder().token(BOT_TOKEN).build()

def is_admin(chat_id: int) -> bool:
    cursor.execute("SELECT 1 FROM admins WHERE chat_id = ?", (chat_id,))
    return cursor.fetchone() is not None

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="open_admin")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id

    if not is_admin(chat_id):
        await query.answer()
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    await query.answer()
    data = query.data

    if data == "open_admin":
        url = "https://optoviyulov.onrender.com/admin"
        await query.edit_message_text(f"[–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å]({url})", parse_mode="Markdown")
    elif data == "add_admin":
        context.user_data["mode"] = "add_admin"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ chat_id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    elif data == "list_admins":
        cursor.execute("SELECT chat_id FROM admins")
        admins = cursor.fetchall()
        msg = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join(str(row[0]) for row in admins)
        await query.edit_message_text(msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not is_admin(chat_id):
        return

    mode = context.user_data.get("mode")
    if mode == "add_admin":
        try:
            new_admin = int(update.message.text.strip())
            cursor.execute("INSERT OR IGNORE INTO admins (chat_id) VALUES (?)", (new_admin,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ê–¥–º–∏–Ω {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
        finally:
            context.user_data.pop("mode", None)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
async def send_order_notification(order_data: dict):
    cursor.execute("SELECT chat_id FROM admins")
    admins = cursor.fetchall()
    msg = (
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"ID: {order_data.get('id')}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_data.get('user_id')}\n"
        f"–¢–æ–≤–∞—Ä—ã: {order_data.get('products')}\n"
        f"–°—É–º–º–∞: {order_data.get('total_price')} ‚ÇΩ\n"
        f"–°—Ç–∞—Ç—É—Å: {order_data.get('status')}\n"
        f"–î–∞—Ç–∞: {order_data.get('created_at')}"
    )
    for (admin_id,) in admins:
        try:
            await application.bot.send_message(chat_id=admin_id, text=msg)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ {admin_id}: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞
def run_bot():
    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(
        application.run_polling(stop_signals=None)
    )


